/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace TodoList {
  export type TodoStruct = {
    id: BigNumberish;
    title: string;
    description: string;
    isDone: boolean;
  };

  export type TodoStructOutput = [
    id: bigint,
    title: string,
    description: string,
    isDone: boolean
  ] & { id: bigint; title: string; description: string; isDone: boolean };
}

export interface TodoListInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createTodo"
      | "deleteTodo"
      | "getAllTodos"
      | "getSpecificTodo"
      | "todoCount"
      | "todos"
      | "toggleCompleted"
      | "updateTodoDescription"
      | "updateTodoTitle"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "TodoCreated"
      | "TodoDeleted"
      | "TodoDescriptionUpdated"
      | "TodoTitleUpdated"
      | "TodoToggled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createTodo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteTodo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTodos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSpecificTodo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "todoCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "todos", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "toggleCompleted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTodoDescription",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTodoTitle",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "createTodo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteTodo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllTodos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpecificTodo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "todoCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "todos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTodoDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTodoTitle",
    data: BytesLike
  ): Result;
}

export namespace TodoCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    title: string,
    description: string,
    isDone: boolean
  ];
  export type OutputTuple = [
    id: bigint,
    title: string,
    description: string,
    isDone: boolean
  ];
  export interface OutputObject {
    id: bigint;
    title: string;
    description: string;
    isDone: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TodoDeletedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TodoDescriptionUpdatedEvent {
  export type InputTuple = [id: BigNumberish, description: string];
  export type OutputTuple = [id: bigint, description: string];
  export interface OutputObject {
    id: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TodoTitleUpdatedEvent {
  export type InputTuple = [id: BigNumberish, title: string];
  export type OutputTuple = [id: bigint, title: string];
  export interface OutputObject {
    id: bigint;
    title: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TodoToggledEvent {
  export type InputTuple = [id: BigNumberish, isDone: boolean];
  export type OutputTuple = [id: bigint, isDone: boolean];
  export interface OutputObject {
    id: bigint;
    isDone: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TodoList extends BaseContract {
  connect(runner?: ContractRunner | null): TodoList;
  waitForDeployment(): Promise<this>;

  interface: TodoListInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createTodo: TypedContractMethod<
    [_title: string, _description: string],
    [void],
    "nonpayable"
  >;

  deleteTodo: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  getAllTodos: TypedContractMethod<[], [TodoList.TodoStructOutput[]], "view">;

  getSpecificTodo: TypedContractMethod<
    [_id: BigNumberish],
    [TodoList.TodoStructOutput],
    "view"
  >;

  todoCount: TypedContractMethod<[], [bigint], "view">;

  todos: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, boolean] & {
        id: bigint;
        title: string;
        description: string;
        isDone: boolean;
      }
    ],
    "view"
  >;

  toggleCompleted: TypedContractMethod<
    [_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateTodoDescription: TypedContractMethod<
    [_description: string, _id: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateTodoTitle: TypedContractMethod<
    [_title: string, _id: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createTodo"
  ): TypedContractMethod<
    [_title: string, _description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteTodo"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllTodos"
  ): TypedContractMethod<[], [TodoList.TodoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getSpecificTodo"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [TodoList.TodoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "todoCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "todos"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, boolean] & {
        id: bigint;
        title: string;
        description: string;
        isDone: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "toggleCompleted"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTodoDescription"
  ): TypedContractMethod<
    [_description: string, _id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTodoTitle"
  ): TypedContractMethod<
    [_title: string, _id: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "TodoCreated"
  ): TypedContractEvent<
    TodoCreatedEvent.InputTuple,
    TodoCreatedEvent.OutputTuple,
    TodoCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TodoDeleted"
  ): TypedContractEvent<
    TodoDeletedEvent.InputTuple,
    TodoDeletedEvent.OutputTuple,
    TodoDeletedEvent.OutputObject
  >;
  getEvent(
    key: "TodoDescriptionUpdated"
  ): TypedContractEvent<
    TodoDescriptionUpdatedEvent.InputTuple,
    TodoDescriptionUpdatedEvent.OutputTuple,
    TodoDescriptionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TodoTitleUpdated"
  ): TypedContractEvent<
    TodoTitleUpdatedEvent.InputTuple,
    TodoTitleUpdatedEvent.OutputTuple,
    TodoTitleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TodoToggled"
  ): TypedContractEvent<
    TodoToggledEvent.InputTuple,
    TodoToggledEvent.OutputTuple,
    TodoToggledEvent.OutputObject
  >;

  filters: {
    "TodoCreated(uint256,string,string,bool)": TypedContractEvent<
      TodoCreatedEvent.InputTuple,
      TodoCreatedEvent.OutputTuple,
      TodoCreatedEvent.OutputObject
    >;
    TodoCreated: TypedContractEvent<
      TodoCreatedEvent.InputTuple,
      TodoCreatedEvent.OutputTuple,
      TodoCreatedEvent.OutputObject
    >;

    "TodoDeleted(uint256)": TypedContractEvent<
      TodoDeletedEvent.InputTuple,
      TodoDeletedEvent.OutputTuple,
      TodoDeletedEvent.OutputObject
    >;
    TodoDeleted: TypedContractEvent<
      TodoDeletedEvent.InputTuple,
      TodoDeletedEvent.OutputTuple,
      TodoDeletedEvent.OutputObject
    >;

    "TodoDescriptionUpdated(uint256,string)": TypedContractEvent<
      TodoDescriptionUpdatedEvent.InputTuple,
      TodoDescriptionUpdatedEvent.OutputTuple,
      TodoDescriptionUpdatedEvent.OutputObject
    >;
    TodoDescriptionUpdated: TypedContractEvent<
      TodoDescriptionUpdatedEvent.InputTuple,
      TodoDescriptionUpdatedEvent.OutputTuple,
      TodoDescriptionUpdatedEvent.OutputObject
    >;

    "TodoTitleUpdated(uint256,string)": TypedContractEvent<
      TodoTitleUpdatedEvent.InputTuple,
      TodoTitleUpdatedEvent.OutputTuple,
      TodoTitleUpdatedEvent.OutputObject
    >;
    TodoTitleUpdated: TypedContractEvent<
      TodoTitleUpdatedEvent.InputTuple,
      TodoTitleUpdatedEvent.OutputTuple,
      TodoTitleUpdatedEvent.OutputObject
    >;

    "TodoToggled(uint256,bool)": TypedContractEvent<
      TodoToggledEvent.InputTuple,
      TodoToggledEvent.OutputTuple,
      TodoToggledEvent.OutputObject
    >;
    TodoToggled: TypedContractEvent<
      TodoToggledEvent.InputTuple,
      TodoToggledEvent.OutputTuple,
      TodoToggledEvent.OutputObject
    >;
  };
}
